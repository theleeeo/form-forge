// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: form/v1/forms.proto

package formconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/theleeeo/form-forge/api-go/form/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FormServiceName is the fully-qualified name of the FormService service.
	FormServiceName = "form.v1.FormService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FormServiceGetByIDProcedure is the fully-qualified name of the FormService's GetByID RPC.
	FormServiceGetByIDProcedure = "/form.v1.FormService/GetByID"
	// FormServiceCreateProcedure is the fully-qualified name of the FormService's Create RPC.
	FormServiceCreateProcedure = "/form.v1.FormService/Create"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	formServiceServiceDescriptor       = v1.File_form_v1_forms_proto.Services().ByName("FormService")
	formServiceGetByIDMethodDescriptor = formServiceServiceDescriptor.Methods().ByName("GetByID")
	formServiceCreateMethodDescriptor  = formServiceServiceDescriptor.Methods().ByName("Create")
)

// FormServiceClient is a client for the form.v1.FormService service.
type FormServiceClient interface {
	GetByID(context.Context, *connect.Request[v1.GetByIDRequest]) (*connect.Response[v1.GetByIDResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
}

// NewFormServiceClient constructs a client for the form.v1.FormService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFormServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FormServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &formServiceClient{
		getByID: connect.NewClient[v1.GetByIDRequest, v1.GetByIDResponse](
			httpClient,
			baseURL+FormServiceGetByIDProcedure,
			connect.WithSchema(formServiceGetByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+FormServiceCreateProcedure,
			connect.WithSchema(formServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// formServiceClient implements FormServiceClient.
type formServiceClient struct {
	getByID *connect.Client[v1.GetByIDRequest, v1.GetByIDResponse]
	create  *connect.Client[v1.CreateRequest, v1.CreateResponse]
}

// GetByID calls form.v1.FormService.GetByID.
func (c *formServiceClient) GetByID(ctx context.Context, req *connect.Request[v1.GetByIDRequest]) (*connect.Response[v1.GetByIDResponse], error) {
	return c.getByID.CallUnary(ctx, req)
}

// Create calls form.v1.FormService.Create.
func (c *formServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// FormServiceHandler is an implementation of the form.v1.FormService service.
type FormServiceHandler interface {
	GetByID(context.Context, *connect.Request[v1.GetByIDRequest]) (*connect.Response[v1.GetByIDResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
}

// NewFormServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFormServiceHandler(svc FormServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	formServiceGetByIDHandler := connect.NewUnaryHandler(
		FormServiceGetByIDProcedure,
		svc.GetByID,
		connect.WithSchema(formServiceGetByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	formServiceCreateHandler := connect.NewUnaryHandler(
		FormServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(formServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/form.v1.FormService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FormServiceGetByIDProcedure:
			formServiceGetByIDHandler.ServeHTTP(w, r)
		case FormServiceCreateProcedure:
			formServiceCreateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFormServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFormServiceHandler struct{}

func (UnimplementedFormServiceHandler) GetByID(context.Context, *connect.Request[v1.GetByIDRequest]) (*connect.Response[v1.GetByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("form.v1.FormService.GetByID is not implemented"))
}

func (UnimplementedFormServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("form.v1.FormService.Create is not implemented"))
}
