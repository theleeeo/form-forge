// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file form/v1/forms.proto (package form.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message form.v1.Form
 */
export class Form extends Message<Form> {
  /**
   * @generated from field: string base_id = 1;
   */
  baseId = "";

  /**
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  /**
   * @generated from field: uint32 version = 3;
   */
  version = 0;

  /**
   * @generated from field: string title = 4;
   */
  title = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Form>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.Form";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Form {
    return new Form().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Form {
    return new Form().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Form {
    return new Form().fromJsonString(jsonString, options);
  }

  static equals(a: Form | PlainMessage<Form> | undefined, b: Form | PlainMessage<Form> | undefined): boolean {
    return proto3.util.equals(Form, a, b);
  }
}

/**
 * @generated from message form.v1.Question
 */
export class Question extends Message<Question> {
  /**
   * @generated from oneof form.v1.Question.question
   */
  question: {
    /**
     * @generated from field: form.v1.TextQuestion text = 1;
     */
    value: TextQuestion;
    case: "text";
  } | {
    /**
     * @generated from field: form.v1.RadioQuestion radio = 2;
     */
    value: RadioQuestion;
    case: "radio";
  } | {
    /**
     * @generated from field: form.v1.CheckboxQuestion checkbox = 3;
     */
    value: CheckboxQuestion;
    case: "checkbox";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Question>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.Question";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "message", T: TextQuestion, oneof: "question" },
    { no: 2, name: "radio", kind: "message", T: RadioQuestion, oneof: "question" },
    { no: 3, name: "checkbox", kind: "message", T: CheckboxQuestion, oneof: "question" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Question {
    return new Question().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Question {
    return new Question().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Question {
    return new Question().fromJsonString(jsonString, options);
  }

  static equals(a: Question | PlainMessage<Question> | undefined, b: Question | PlainMessage<Question> | undefined): boolean {
    return proto3.util.equals(Question, a, b);
  }
}

/**
 * @generated from message form.v1.TextQuestion
 */
export class TextQuestion extends Message<TextQuestion> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  constructor(data?: PartialMessage<TextQuestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.TextQuestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextQuestion {
    return new TextQuestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextQuestion {
    return new TextQuestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextQuestion {
    return new TextQuestion().fromJsonString(jsonString, options);
  }

  static equals(a: TextQuestion | PlainMessage<TextQuestion> | undefined, b: TextQuestion | PlainMessage<TextQuestion> | undefined): boolean {
    return proto3.util.equals(TextQuestion, a, b);
  }
}

/**
 * @generated from message form.v1.RadioQuestion
 */
export class RadioQuestion extends Message<RadioQuestion> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[] = [];

  constructor(data?: PartialMessage<RadioQuestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.RadioQuestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RadioQuestion {
    return new RadioQuestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RadioQuestion {
    return new RadioQuestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RadioQuestion {
    return new RadioQuestion().fromJsonString(jsonString, options);
  }

  static equals(a: RadioQuestion | PlainMessage<RadioQuestion> | undefined, b: RadioQuestion | PlainMessage<RadioQuestion> | undefined): boolean {
    return proto3.util.equals(RadioQuestion, a, b);
  }
}

/**
 * @generated from message form.v1.CheckboxQuestion
 */
export class CheckboxQuestion extends Message<CheckboxQuestion> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[] = [];

  constructor(data?: PartialMessage<CheckboxQuestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CheckboxQuestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckboxQuestion {
    return new CheckboxQuestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckboxQuestion {
    return new CheckboxQuestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckboxQuestion {
    return new CheckboxQuestion().fromJsonString(jsonString, options);
  }

  static equals(a: CheckboxQuestion | PlainMessage<CheckboxQuestion> | undefined, b: CheckboxQuestion | PlainMessage<CheckboxQuestion> | undefined): boolean {
    return proto3.util.equals(CheckboxQuestion, a, b);
  }
}

/**
 * @generated from message form.v1.ResponsePagination
 */
export class ResponsePagination extends Message<ResponsePagination> {
  /**
   * bytes next_page_token = 2;
   *
   * @generated from field: uint64 total = 1;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ResponsePagination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.ResponsePagination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponsePagination {
    return new ResponsePagination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponsePagination {
    return new ResponsePagination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponsePagination {
    return new ResponsePagination().fromJsonString(jsonString, options);
  }

  static equals(a: ResponsePagination | PlainMessage<ResponsePagination> | undefined, b: ResponsePagination | PlainMessage<ResponsePagination> | undefined): boolean {
    return proto3.util.equals(ResponsePagination, a, b);
  }
}

/**
 * @generated from message form.v1.GetByIdRequest
 */
export class GetByIdRequest extends Message<GetByIdRequest> {
  /**
   * The base ID of the form to get.
   *
   * @generated from field: string base_id = 1;
   */
  baseId = "";

  /**
   * The version ID of the form to get.
   * If not provided, the latest version of the form will be returned.
   *
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  constructor(data?: PartialMessage<GetByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.GetByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByIdRequest {
    return new GetByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByIdRequest {
    return new GetByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByIdRequest {
    return new GetByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetByIdRequest | PlainMessage<GetByIdRequest> | undefined, b: GetByIdRequest | PlainMessage<GetByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetByIdRequest, a, b);
  }
}

/**
 * @generated from message form.v1.GetByIdResponse
 */
export class GetByIdResponse extends Message<GetByIdResponse> {
  /**
   * @generated from field: form.v1.Form form = 1;
   */
  form?: Form;

  constructor(data?: PartialMessage<GetByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.GetByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByIdResponse {
    return new GetByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByIdResponse {
    return new GetByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByIdResponse {
    return new GetByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetByIdResponse | PlainMessage<GetByIdResponse> | undefined, b: GetByIdResponse | PlainMessage<GetByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetByIdResponse, a, b);
  }
}

/**
 * @generated from message form.v1.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated form.v1.CreateQuestionParameters questions = 3;
   */
  questions: CreateQuestionParameters[] = [];

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "questions", kind: "message", T: CreateQuestionParameters, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * @generated from message form.v1.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  /**
   * @generated from field: string base_id = 1;
   */
  baseId = "";

  /**
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * @generated from message form.v1.CreateQuestionParameters
 */
export class CreateQuestionParameters extends Message<CreateQuestionParameters> {
  /**
   * @generated from oneof form.v1.CreateQuestionParameters.question
   */
  question: {
    /**
     * @generated from field: form.v1.CreateTextQuestionParameters text = 1;
     */
    value: CreateTextQuestionParameters;
    case: "text";
  } | {
    /**
     * @generated from field: form.v1.CreateRadioQuestionParameters radio = 2;
     */
    value: CreateRadioQuestionParameters;
    case: "radio";
  } | {
    /**
     * @generated from field: form.v1.CreateCheckboxQuestionParameters checkbox = 3;
     */
    value: CreateCheckboxQuestionParameters;
    case: "checkbox";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateQuestionParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CreateQuestionParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "message", T: CreateTextQuestionParameters, oneof: "question" },
    { no: 2, name: "radio", kind: "message", T: CreateRadioQuestionParameters, oneof: "question" },
    { no: 3, name: "checkbox", kind: "message", T: CreateCheckboxQuestionParameters, oneof: "question" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateQuestionParameters {
    return new CreateQuestionParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateQuestionParameters {
    return new CreateQuestionParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateQuestionParameters {
    return new CreateQuestionParameters().fromJsonString(jsonString, options);
  }

  static equals(a: CreateQuestionParameters | PlainMessage<CreateQuestionParameters> | undefined, b: CreateQuestionParameters | PlainMessage<CreateQuestionParameters> | undefined): boolean {
    return proto3.util.equals(CreateQuestionParameters, a, b);
  }
}

/**
 * @generated from message form.v1.CreateTextQuestionParameters
 */
export class CreateTextQuestionParameters extends Message<CreateTextQuestionParameters> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  constructor(data?: PartialMessage<CreateTextQuestionParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CreateTextQuestionParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTextQuestionParameters {
    return new CreateTextQuestionParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTextQuestionParameters {
    return new CreateTextQuestionParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTextQuestionParameters {
    return new CreateTextQuestionParameters().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTextQuestionParameters | PlainMessage<CreateTextQuestionParameters> | undefined, b: CreateTextQuestionParameters | PlainMessage<CreateTextQuestionParameters> | undefined): boolean {
    return proto3.util.equals(CreateTextQuestionParameters, a, b);
  }
}

/**
 * @generated from message form.v1.CreateRadioQuestionParameters
 */
export class CreateRadioQuestionParameters extends Message<CreateRadioQuestionParameters> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[] = [];

  constructor(data?: PartialMessage<CreateRadioQuestionParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CreateRadioQuestionParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRadioQuestionParameters {
    return new CreateRadioQuestionParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRadioQuestionParameters {
    return new CreateRadioQuestionParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRadioQuestionParameters {
    return new CreateRadioQuestionParameters().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRadioQuestionParameters | PlainMessage<CreateRadioQuestionParameters> | undefined, b: CreateRadioQuestionParameters | PlainMessage<CreateRadioQuestionParameters> | undefined): boolean {
    return proto3.util.equals(CreateRadioQuestionParameters, a, b);
  }
}

/**
 * @generated from message form.v1.CreateCheckboxQuestionParameters
 */
export class CreateCheckboxQuestionParameters extends Message<CreateCheckboxQuestionParameters> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[] = [];

  constructor(data?: PartialMessage<CreateCheckboxQuestionParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.CreateCheckboxQuestionParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCheckboxQuestionParameters {
    return new CreateCheckboxQuestionParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCheckboxQuestionParameters {
    return new CreateCheckboxQuestionParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCheckboxQuestionParameters {
    return new CreateCheckboxQuestionParameters().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCheckboxQuestionParameters | PlainMessage<CreateCheckboxQuestionParameters> | undefined, b: CreateCheckboxQuestionParameters | PlainMessage<CreateCheckboxQuestionParameters> | undefined): boolean {
    return proto3.util.equals(CreateCheckboxQuestionParameters, a, b);
  }
}

/**
 * @generated from message form.v1.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message form.v1.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated form.v1.Form forms = 1;
   */
  forms: Form[] = [];

  /**
   * @generated from field: form.v1.ResponsePagination pagination = 2;
   */
  pagination?: ResponsePagination;

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forms", kind: "message", T: Form, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: ResponsePagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message form.v1.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * The ID of the form to update
   *
   * @generated from field: string base_id = 1;
   */
  baseId = "";

  /**
   * The new form to replace the old form with
   *
   * @generated from field: form.v1.CreateRequest new_form = 2;
   */
  newForm?: CreateRequest;

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_form", kind: "message", T: CreateRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * @generated from message form.v1.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  /**
   * @generated from field: string base_id = 1;
   */
  baseId = "";

  /**
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * @generated from message form.v1.GetQuestionsRequest
 */
export class GetQuestionsRequest extends Message<GetQuestionsRequest> {
  /**
   * @generated from field: string base_id = 1;
   */
  baseId = "";

  /**
   * If set, will return the questions of the form at the specified version.
   *
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  constructor(data?: PartialMessage<GetQuestionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.GetQuestionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQuestionsRequest {
    return new GetQuestionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQuestionsRequest {
    return new GetQuestionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQuestionsRequest {
    return new GetQuestionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetQuestionsRequest | PlainMessage<GetQuestionsRequest> | undefined, b: GetQuestionsRequest | PlainMessage<GetQuestionsRequest> | undefined): boolean {
    return proto3.util.equals(GetQuestionsRequest, a, b);
  }
}

/**
 * @generated from message form.v1.GetQuestionsResponse
 */
export class GetQuestionsResponse extends Message<GetQuestionsResponse> {
  /**
   * @generated from field: repeated form.v1.Question questions = 1;
   */
  questions: Question[] = [];

  constructor(data?: PartialMessage<GetQuestionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "form.v1.GetQuestionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "questions", kind: "message", T: Question, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQuestionsResponse {
    return new GetQuestionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQuestionsResponse {
    return new GetQuestionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQuestionsResponse {
    return new GetQuestionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetQuestionsResponse | PlainMessage<GetQuestionsResponse> | undefined, b: GetQuestionsResponse | PlainMessage<GetQuestionsResponse> | undefined): boolean {
    return proto3.util.equals(GetQuestionsResponse, a, b);
  }
}

